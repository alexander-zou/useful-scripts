#!/bin/bash

###
# 
# @File   : adbw
# @Author : zoujiachen@megvii.com   
# @Date   : 2019-05-16 11:03   
# @Brief  : an adb wrapper with improvements:
#           1. ask which device to proceed command with when not sure
#           2. pull command support wildcard characters
#           3. install command could help you with uninstalling if necessary
#           4. recognize unambiguous prefix of adb commands
#               e.g. 'sh' for 'shell', 'log' for 'logcat'
# @Usage  : same as original adb
# 
###

cmd=""

devices=$(adb devices | egrep -o '^[0-9a-zA-Z]{6,20}\s+device$' | wc -l)
serial=""

# command completion:

CMD_COMPLETE_LIST=(
    devices
    help
    version
    connect
    disconnect
    forward
    ppp
    reverse
    push
    pull
    sync
    shell
    emu
    install
#    install-multiple
    uninstall
    backup
    restore
    bugreport
#    jdwp
    logcat
    disable-verity
    enable-verity
    keygen
    remount
    reboot
    sideload
    root
    unroot
    usb
    tcpip
    start-server
    kill-server
    reconnect
)

found_exact_match=''

for each_cmd in "${CMD_COMPLETE_LIST[@]}"
do
    if [[ "$1" = "$each_cmd" ]]
    then
        cmd="$1"
        found_exact_match=yes
        break
    fi
done

if [[ -z "$found_exact_match" ]]
then
    prefix_matches=()
    for each_cmd in "${CMD_COMPLETE_LIST[@]}"
    do
        if [[ "$each_cmd" = "$1"* ]]
        then
            prefix_matches=( "${prefix_matches[@]}" "$each_cmd" )
        fi
    done
    if [[ "${#prefix_matches[@]}" -eq 1 ]]
    then
        cmd="${prefix_matches[0]}"
    elif [[ "${#prefix_matches[@]}" -gt 1 ]]
    then
        echo "adbw: unknown command '$1', candidates are:" >&2
        echo "    ${prefix_matches[@]}" >&2
        exit 1
    else
        cmd="$1"
    fi
fi

# functions:

DoAdb() {
    if [[ -z "$serial" ]]
    then
        adb "$@"
        return $?
    else
        adb -s "$serial" "$@"
        return $?
    fi
}

Question() {
	while [[ 1 ]]
	do
		echo "$1" >&2
		default_value="$2"
		read line
		if [ "${#default_value}" -gt '0' -a "${#line}" -eq '0' ]
		then
			return $default_value
		fi
		case "${line:0:1}" in
			y|Y )	return 1;;
			n|N )	return 0;;
		esac
	done
}

AskSerialNo() {
    if [[ "$ANDROID_SERIAL" ]]
    then
        return
    fi
    read -a sn_arr <<< $(adb devices | egrep -o '^[0-9a-zA-Z]{6,20}\s+device$' | egrep -o '^[0-9a-zA-Z]{6,20}')
    for idx in "${!sn_arr[@]}"
    do
        manufacturer=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.manufacturer | tr -d '\n\r')
        if [[ -z "$manufacturer" ]]
        then
            manufacturer=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.brand | tr -d '\n\r')
        fi
        model=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.model | tr -d '\n\r')
        dev=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.device | tr -d '\n\r')
        if [[ -z "$dev" ]]
        then
            dev=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.name | tr -d '\n\r')
        fi
        info_arr[$idx]="${manufacturer} ${model} ${dev} [${sn_arr[$idx]}]"
    done
    while [[ -z "$serial" ]]
    do
        echo "Select device to proceed:" >&2
        for idx in "${!info_arr[@]}"
        do
            echo "  $(($idx+1)): ${info_arr[$idx]}"  >&2
        done
        read line
        if [[ -z $(echo "$line" | egrep -o '^\s*[0-9]+\s*$') ]]
        then
            match_count="0"
            for idx in "${!info_arr[@]}"
            do
                if [[ $(echo "${info_arr[$idx]}" | grep -ci "$line") -gt 0 ]]
                then
                    match_count=$(($match_count + 1))
                    serial=${sn_arr[$idx]}
                fi
            done
            if [[ "$match_count" -ne 1 ]]
            then
                serial=""
            fi
        elif [[ "$line" -le "${#sn_arr[*]}" && "$line" -gt "0" ]]
        then
            idx=$(($line - 1))
            serial="${sn_arr[$idx]}"
        fi
    done
}

DoWithSerialNo() {
    if [[ "$devices" -gt 1 ]]
    then
        AskSerialNo
    fi
    DoAdb "$@"
    exit $?
}

DoInstall() {
    if [[ "$devices" -gt 1 ]]
    then
        AskSerialNo
    fi
    result=$(DoAdb "$@" 2>&1)
    retcode=$?
    echo "$result" >&2
    if [[ $(echo "$result" | egrep -c '(INSTALL_FAILED_UPDATE_INCOMPATIBLE|INSTALL_FAILED_ALREADY_EXISTS)') -gt 0 ]]
    then
        appid=$(echo "$result" | egrep -o '(Package|re-install) .* (signatures|without)' | egrep -o ' .* ' | egrep -o '[^ ]+' )
        Question "Uninstall ${appid} & try again? [Y/n]" 1
        if [ "$?" -eq 0 ]
        then
            exit $retcode
        fi
        DoAdb uninstall "$appid" && DoAdb "$@"
        retcode="$?"
    fi
    exit $retcode
}

DoDevices() {
    if [[ "$#" -gt 0 ]]
    then
        DoAdb devices $@
        exit $?
    fi
    read -a sn_arr <<< $(adb devices | egrep -o '^[0-9a-zA-Z]{6,20}\s+device$' | egrep -o '^[0-9a-zA-Z]{6,20}')
    for idx in "${!sn_arr[@]}"
    do
        manufacturer=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.manufacturer | tr -d '\n\r')
        if [[ -z "$manufacturer" ]]
        then
            manufacturer=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.brand | tr -d '\n\r')
        fi
        model=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.model | tr -d '\n\r')
        dev=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.device | tr -d '\n\r')
        if [[ -z "$dev" ]]
        then
            dev=$(adb -s "${sn_arr[$idx]}" shell getprop ro.product.name | tr -d '\n\r')
        fi
        info_arr[$idx]="${manufacturer} ${model} ${dev} [${sn_arr[$idx]}]"
    done
    echo "List of devices attached"
    for idx in "${!info_arr[@]}"
    do
        echo "  $(($idx+1)): ${info_arr[$idx]}"
    done
    exit 0
}

DoPull() {
    if [[ "$devices" -gt 1 ]]
    then
        AskSerialNo
    fi
    if [[ "$1" = "-a" ]]
    then
        shift
        preserve_ts_mode=1
    else
        preserve_ts_mode=0
    fi
    dst_path="./"
    src_count=1
    if [[ "$#" -gt 1 ]]
    then
        dst_path="${@:$#:1}"
        src_count=$(($#-1))
    elif [[ "$#" -le 0 ]]
    then
        DoAdb pull "$@"
        exit $?
    fi
    local IFS=$'\n'
    for ((i=1;i<="$src_count";i++))
    do
        local path="${!i}"
        list=( "${list[@]}" $(DoAdb shell ls -d -- "${path// /\ }"))
    done
    #IFS=$'\n' list=($(DoAdb shell ls -d -- ${@:1:$src_count}))
    if [[ "${#list[@]}" -eq 0 ]]
    then
        exit 1
    fi
    if [[ $preserve_ts_mode -eq 0 ]]
    then
        DoAdb pull "${list[@]}" "$dst_path"
        exit $?
    else
        DoAdb pull -a "${list[@]}" "$dst_path"
        exit $?
    fi
}

DoIp() {
    if [[ "$devices" -gt 1 ]]
    then
        AskSerialNo
    fi
    result=$(DoAdb shell ifconfig)
    IFS=$'\n' lines=($result)
    ret=1
    interface=
    for line in ${lines[@]}
    do
        if [[ $(echo "$line" | egrep -c '^[a-zA-Z0-9]+(:| )') -eq 1 ]]
        then
            interface=$(echo "$line" | egrep -o '^[a-zA-Z0-9]+')
        elif [[ $(echo "$line" | egrep -c '^\s+(inet\s+|inet addr:)[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+') -eq 1 ]]
        then
            address=$(echo "$line" | egrep -o '^\s+(inet\s+|inet addr:)[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | egrep -o '[0-9\.]+')
            if [[ "$address" = '127.0.0.1' ]]
            then
                continue
            fi
            if [[ -t 1 ]]
            then
                echo -e "\033[31;1m${address}\033[0m [\033[36;3m$interface\033[0m]"
            else
                echo "$address [$interface]"
            fi
            interface=
            address=
            ret=0
        fi
    done
    exit $ret
}

# main:

case "$cmd" in
    push|shell|install-multiple|uninstall|backup|restore|logcat|remount|enable-verity|disable-verity|reboot|sideload|root|unroot|usb|tcpip )
        shift
        DoWithSerialNo "$cmd" "$@"
        ;;
    install )
        shift
        DoInstall "$cmd" "$@"
        ;;
    pull )
        shift
        DoPull "$@"
        ;;
    devices )
        shift
        DoDevices "$@"
        ;;
    ip )
        shift
        DoIp "$@"
        ;;
    ?* )
        shift
        DoAdb "$cmd" "$@"
        exit $?
        ;;
    *)
        DoAdb "$@"
        exit $?
        ;;
esac

# End of 'adbw' 

