#!/usr/bin/perl

# by zoujiachen@baidu.com
# 2011-05-13

use File::Find;

sub Error {
	print STDERR "$0: @_\nTry '$0 -h' for help.\n";
	exit -1;
}

sub Warning {
	print STDERR "$0: @_\n";
}

$show_help = 0;
$search_bin = 0;
$count_file = 0;
$count_line = 0;
$ignore_case = 0;
$only_once = 0;
$show_lineno = 0;
$use_color = 0;
if ( -t STDOUT) {
	$use_color = 1;
}

$pattern = "";

$file_counter = 0;
$line_counter = 0;
@dirs = ();

sub FindText {
	my $file = @_[0];
	my $fullpath = @_[1];
	my $ret = open my $f, '<'.$file;
	if ( ! $ret) {
		Warning "Failed to open file '".$fullpath."':".$!;
		return;
	}

	$lineno = 1;
	$matched = 0;
	while ( my $line = <$f>) {
		chomp( $line);
		if ( ( $ignore_case > 0 && $line =~ /$pattern/i) || $line =~ /$pattern/) {
			print $COLOR_NAME.$fullpath.$CLR_COLOR.$COLON;
			if ( $show_lineno) {
				print $COLOR_LINENO.$lineno.$CLR_COLOR.$COLON;
			}
			print $`.$COLOR_MATCH.$&.$CLR_COLOR.$'."\n";
			$line_counter ++;
			$matched = 1;
			if ( $only_once > 0) {
				last;
			}
		}
		$lineno ++;
	}
	if ( $matched > 0) {
		$file_counter ++;
	}

	close $f;
}

sub FindBin {
	my $file = @_[0];
	my $fullname = @_[1];
	my $ret = open my $f, 'strings "'.$file.'" |';
	if ( ! $ret) {
		Warning "Failed to open file '".$fullname."':".$!;
		return;
	}

	$matched = 0;
	while ( my $line = <$f>) {
		chomp( $line);
		if ( ( $ignore_case > 0 && $line =~ /$pattern/i) || $line =~ /$pattern/) {
			print $COLOR_NAME.$fullname.$CLR_COLOR.$COLON;
			print $`.$COLOR_MATCH.$&.$CLR_COLOR.$'."\n";
			$line_counter ++;
			$matched = 1;
			if ( $only_once > 0) {
				last;
			}
		}
	}
	if ( $matched > 0) {
		$file_counter ++;
	}

	close $f;
}

sub Search {
	my $file = $_;
	my $fullname = $File::Find::name;
	my $type = `file '$file'`;
	if ( index( $type, "directory") >= 0) {
	} elsif ( index( $type, "text") >= 0) {
		FindText $file, $fullname;
	} elsif ( $search_bin) {
		FindBin $file, $fullname;
	}
}

$arg_ended = 0;

for ( @ARGV) {
	if ( $arg_ended > 0) {
		if ( $pattern eq "") {
			$pattern = $_;
		} else {
			push( @dirs, $_);
		}
	} elsif ( $_ eq "-h" or $_ eq "-help" or $_ eq "--help") {
		$show_help = 1;
	} elsif ( $_ eq "-i") {
		$ignore_case = 1;
	} elsif ( $_ eq "-n") {
		$show_lineno = 1;
	} elsif ( $_ eq "-b") {
		$search_bin = 1;
	} elsif ( $_ eq "-1") {
		$only_once = 1;
	} elsif ( $_ eq "-c") {
		$use_color = 0;
	} elsif ( $_ eq "-f") {
		$count_file = 1;
	} elsif ( $_ eq "-l") {
		$count_line = 1;
	} elsif ( $_ eq "--") {
		$arg_ended = 1;
	} elsif ( substr( $_, 0, 1) eq '-') {
		Error "No such options: '$_'";
	} elsif ( $pattern eq "") {
		$pattern = $_;
	} else {
		push( @dirs, $_);
	}
}

if ( $use_color == 0) {
	$COLOR_NAME = "";
	$COLOR_LINENO = "";
	$COLOR_MATCH = "";
	$COLOR_COUNT = "";
	$COLOR_SYNTAX = "";
	$CLR_COLOR = "";
	$COLON = ":";
} else {
	$COLOR_NAME = "\033[36;1m";
	$COLOR_LINENO = "\033[36;5m";
	$COLOR_MATCH = "\033[31;1m";
	$COLOR_COUNT = "\033[33;5m";
	$COLOR_SYNTAX = "\033[4m";
	$CLR_COLOR = "\033[0m";
	$COLON = "\033[37;2m:\033[0m";
}

if ( $show_help) {
	print "
USAGE:
	$0 [${COLOR_SYNTAX}OPTION${CLR_COLOR}]... [--] ${COLOR_SYNTAX}PATTERN${CLR_COLOR} ${COLOR_SYNTAX}DIRECTORY${CLR_COLOR}...

DESCRIPT:
	Search for files that contains ${COLOR_SYNTAX}PATTERN${CLR_COLOR} in every ${COLOR_SYNTAX}DIRECTORY${CLR_COLOR}.

OPTIONS:
	-i	Ignore cases
	-b	Search in binary files ( By default only text files searched )
	-n	Show line number of text files
	-1	Match at most once for each file  
	-f	Count matched files
	-l	Count matched lines
	-c	Force to disable colors
	
	-h	Show this message

EXAMPLES:
	# Count text files that contain hex number:
	search_fs -i -f '0x[\da-f]+' ~/src

	# Search for 'main' in binary & text files inside folder '-1' & '-2':
	search_fs -b -- main -1 -2

";
	exit -1;
}

if ( $pattern eq "") {
	Error "missing PATTERN for searching !";
} elsif ( @dirs <= 0) {
	Error "missing DIRECTORY to search !";
}

for ( @dirs) {
	find( \&Search, $_);
}

if ( $count_line > 0 && $count_file > 0) {
	print $COLOR_COUNT."$line_counter".$CLR_COLOR." line(s) matched in ".$COLOR_COUNT."$file_counter".$CLR_COLOR." file(s).\n";
} elsif ( $count_file > 0) {
	print $COLOR_COUNT."$file_counter".$CLR_COLOR." file(s) matched.\n";
} elsif ( $count_line > 0) {
	print $COLOR_COUNT."$line_counter".$CLR_COLOR." line(s) matched in total.\n";
}

if ( $line_counter <= 0) {
	exit 1;
}
