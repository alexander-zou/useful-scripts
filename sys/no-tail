#!/usr/bin/env bash

###
# 
# @File   : no-tail   
# @Author : jiachen.zou@jiiov.com   
# @Date   : 2021-03-15 17:55 CST(+0800)   
# @Brief  : print what 'tail' won't
# 
###

prog="$0"

line_count=0
byte_count=0
opt_quite=
status=0

ErrorExit() {
    echo "$prog: $1" >&2
    exit 1
}

CheckSetting() {
    if [[ "$line_count" -gt 0 || "$byte_count" -gt 0 ]]
    then
        ErrorExit "conflict option '$1'."
    fi
}

Process() {
    file="$1"
    if [[ ! -r "$file" ]]
    then
        echo "$prog: cannot read from file '$file'." >&2
        status=2
        return
    fi
    [[ "$opt_quite" ]] || echo "==> $file <=="
    [[ "$line_count" -le 0 ]] && line_count=10
    if [[ "$byte_count" -gt 0 ]]
    then
        total="$(cat "$file" | wc -c)"
        total="$((total-byte_count))"
        if [[ "$total" -ge 1 ]]
        then
            head -c "$total" "$file"
        fi
    else
        total="$(cat "$file" | wc -l)"
        total="$((total-line_count))"
        if [[ "$total" -ge 1 ]]
        then
            head -n "$total" "$file"
        fi
    fi
}

while [[ "$1" == '-'* ]]
do
    if [[ "$1" == '-h' || "$1" == '--help' ]]
    then
        echo "Usage: $prog [-q] [-n LINES | -c BYTES] [FILE ...]"
        exit 255
    elif [[ "$1" == '--' ]]
    then
        shift
        break
    elif [[ "$1" == '-q' ]]
    then
        opt_quite=yes
        shift
    elif [[ "$1" == '-n' ]]
    then
        CheckSetting "$1"
        if [[ "$2" =~ ^[0-9]+$ && "$2" -ne 0 ]]
        then
            line_count="$2"
            shift 2
        else
            ErrorExit "invalid count '$2'."
        fi
    elif [[ "$1" =~ ^-n[0-9]+$ && "${1:2}" -ne 0 ]]
    then
        CheckSetting "$1"
        line_count="${1:2}"
        shift
    elif [[ "$1" =~ ^-[0-9]+$ && "${1:1}" -ne 0 ]]
    then
        CheckSetting "$1"
        line_count="${1:1}"
        shift
    elif [[ "$1" == '-c' ]]
    then
        CheckSetting "$1"
        if [[ "$2" =~ ^[0-9]+$ && "$2" -ne 0 ]]
        then
            byte_count="$2"
            shift 2
        else
            ErrorExit "invalid count '$2'."
        fi
    elif [[ "$1" =~ ^-c[0-9]+$ && "${1:2}" -ne 0 ]]
    then
        CheckSetting "$1"
        byte_count="${1:2}"
        shift
    else
        ErrorExit "invalid option '$1'."
    fi
done

[[ "$#" -le 1 ]] && opt_quite=yes

if [[ "$#" -eq 0 ]]
then
    tmp="$(mktemp)"
    cat > "$tmp"
    Process "$tmp"
    rm "$tmp"
else
    while [[ "$#" -gt 0 ]]
    do
        Process "$1"
        shift
    done
fi

exit "$status"

# End of 'no-tail' 

