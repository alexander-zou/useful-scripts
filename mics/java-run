#!/bin/bash

# by zoujiachen@megvii.com
# 2018-10-31 aka. Christmas Day

EDITOR="vim"
COMPILER="javac"
JRE="java"

MY_NAME="$0"
CMD="$1"
shift
OPTIONS="$*"
MY_TTY=`tty`
MY_TTY=`basename "$MY_TTY"`
TEMP_DIR="$HOME/.java-run"
WORK_DIR="$TEMP_DIR/$MY_TTY"
SOURCE_FILE="$WORK_DIR/Main.java"
TARGET_FILE="$WORK_DIR/Main.class"

NO_EDIT=""

Help() {
	echo -e
	echo -e "Open $EDITOR for you to write short Java code, then compile & run it immediately."
	echo -e
	echo -e "USAGE:"
	echo -e "\\t\\t$MY_NAME COMMAND [JAVAC_OPTIONS]"
	echo -e
	echo -e "COMMAND:"
	echo -e "\\t\\tnew\\t- start empty source from scratch"
	echo -e "\\t\\tlast\\t- continue with source file saved last time"
	echo -e "\\t\\tagain\\t- compile & run last program again directly"
	echo -e "\\t\\tpath\\t- show path of source file"
	echo -e "\\t\\thelp\\t- show this information"
	echo -e
	echo -e "JAVAC_OPTIONS:"
	echo -e "\\t\\tall other options will pass to compiler"
	echo -e
	exit 1
}

Question() {
	while [[ 1 ]]
	do
		Print 'PINK' "$1"
		default_value="$2"
		read line
		if [ "${#default_value}" -gt '0' -a "${#line}" -eq '0' ]
		then
			return $default_value
		fi
		case "${line:0:1}" in
			y|Y )	return 1;;
			n|N )	return 0;;
		esac
	done
}

Print() {
	local color="$1"
	shift
	case "$color" in
		GRAY	) color="30";;
		RED	) color="31";;
		GREEN	) color="32";;
		YELLOW	) color="33";;
		BLUE	) color="34";;
		PINK	) color="35";;
		LBLUE	) color="36";;
		WHITE	) color="37";;
		BLACK	) color="38";;
		*	) color="00";;
	esac
	printf '\033[%s;1m%s\033[0m\n' "$color" "$*"
}

NewFile() {
	Print 'LBLUE' "Creating new file ..."
	mkdir -p "$WORK_DIR"
	if [ "$?" -ne "0" ]
	then
		Print 'RED' "ERROR: fail to create tempory directory, try 'rm -rf $TEMP_DIR' to fix it." >&2
	fi
	if [ -f "$SOURCE_FILE" ]
	then
		now=$(date '+%s')
		ts=$(date -r "$SOURCE_FILE" '+%s')
		if [ "$(($now - $ts < 24 * 60 * 60))" -ne 0 ]
		then
			Question 'Sure to OVERWRITE your code with new file? [Y/n]' 1
			if [ "$?" -eq 0 ]
			then
				Print 'YELLOW' 'Canceled.'
				exit 1
			fi
		fi
	fi
	rm -rf $WORK_DIR/*
	# Template Here :
	echo >> "$SOURCE_FILE"
	echo 'class Main {' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
	echo '  public static void main( String[] args) {' >> "$SOURCE_FILE"
	echo '    System.exit( 0);' >> "$SOURCE_FILE"
	echo '  }' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
	echo '} // class Main' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
}

case "$CMD" in
	help )	Help;;
	new  )	NewFile;;
	last )	if [ ! -f "$SOURCE_FILE" ]
			then
				Print 'LBLUE' "no old source file found."
				NewFile
			fi;;
	again)	if [ ! -f "$SOURCE_FILE" ]
			then
				Print 'LBLUE' "no old source file found."
				NewFile
			fi
			NO_EDIT="yes";;
	path )  if [ ! -f "$SOURCE_FILE" ]
			then
				Print 'RED' "no old source file found."
				exit 1
			else
				Print 'LBLUE' "$SOURCE_FILE"
				exit 0
			fi;;
	* )		Print 'RED' "ERROR: you need to provide a command, see '$MY_NAME help' for help." >&2
			exit 1;;
esac

if [ ! "$NO_EDIT" ]
then
	START_LINE=$(egrep -n '\s*void\s+main\s*\(\s*String' "$SOURCE_FILE" | egrep -o '^\d+')
	if [ "$?" -ne '0' ]
	then
		START_LINE=1
	else
		START_LINE=$((START_LINE+1))
	fi
	if [ "$EDITOR" == "vi" -o "$EDITOR" == "vim" -o "$EDITOR" == "gvim" ]
	then
		$EDITOR "$SOURCE_FILE" +"$START_LINE"
	else
		$EDITOR "$SOURCE_FILE"
	fi
	ret="$?"
	if [ "$ret" -ne "0" ]
	then
		Print 'RED' "ERROR: editor($EDITOR) returned $ret." >&2
		exit "$ret"
	fi
fi

Print 'LBLUE' "Compiling ..."
rm -rf "$TARGET_FILE"
$COMPILER $OPTIONS "$SOURCE_FILE"
ret="$?"
if [ "$ret" -ne "0" ]
then
	Print 'RED' "ERROR: compiler($COMPILER) returned $ret." >&2
	exit "$ret"
fi

args=""
if [ $(egrep -c '[^a-z^A-Z^0-9]+args[^a-z^A-Z^0-9]' "$SOURCE_FILE") -gt 1 ]
then
	Print 'LBLUE' "Please enter arguments for launching your program:"
	read args
fi

Print 'LBLUE' "Launching ..."
Print 'YELLOW' "================= OUTPUT ================="
bash -c "\"$JRE\" -cp \"$WORK_DIR\" Main $args"
ret="$?"
Print 'YELLOW' "=========================================="
if [ "$ret" -ne "0" ]
then
	Print 'RED' "WARNING: your program returned $ret." >&2
	exit "$ret"
fi

Print 'LBLUE' "DONE"

