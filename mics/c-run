#!/bin/bash

# by zoujiachen@baidu.com
# 2011-11-11 (such a beautiful day !!)

EDITOR="vim"
COMPILER="gcc -o"

MY_NAME="$0"
CMD="$1"
shift
OPTIONS="$*"
MY_TTY=`tty`
MY_TTY=`basename "$MY_TTY"`
TEMP_DIR="$HOME/.c-run"
WORK_DIR="$TEMP_DIR/$MY_TTY"
SOURCE_FILE="$WORK_DIR/source.c"
TARGET_FILE="$WORK_DIR/a.out"

NO_EDIT=""

Help() {
	echo -e
	echo -e "Open $EDITOR for you to write short C code, then compile & run it immediately."
	echo -e
	echo -e "USAGE:"
	echo -e "\\t\\t$MY_NAME COMMAND [GCC_OPTIONS]"
	echo -e
	echo -e "COMMAND:"
	echo -e "\\t\\tnew\\t- start from an empty pattern"
	echo -e "\\t\\tlast\\t- continue with source file saved last time"
	echo -e "\\t\\tagain\\t- compile & run last program again directly"
	echo -e "\\t\\thelp\\t- show this information"
	echo -e
	echo -e "GCC_OPTIONS:"
	echo -e "\\t\\tall other options will pass to compiler"
	echo -e
	exit 1
}

Print() {
	local color="$1"
	shift
	case "$color" in
		GRAY	) color="30";;
		RED		) color="31";;
		GREEN	) color="32";;
		YELLOW	) color="33";;
		BLUE	) color="34";;
		PINK	) color="35";;
		LBLUE	) color="36";;
		WHITE	) color="37";;
		BLACK	) color="38";;
		*		) color="00";;
	esac
	printf '\033[%s;1m%s\033[0m\n' "$color" "$*"
}

NewFile() {
	Print 'LBLUE' "Creating new file ..."
	mkdir -p "$WORK_DIR"
	if [ "$?" -ne "0" ]
	then
		Print 'RED' "ERROR: fail to create tempory directory, try 'rm -rf $TEMP_DIR' to fix it." >&2
	fi
	rm -rf $WORK_DIR/*
	# Template Here :
	echo '#include <stdio.h>' >> "$SOURCE_FILE"
	echo '#include <stdlib.h>' >> "$SOURCE_FILE"
	echo '#include <string.h>' >> "$SOURCE_FILE"
	echo '#include <limits.h>' >> "$SOURCE_FILE"
	echo '#include <errno.h>' >> "$SOURCE_FILE"
	echo '#include <time.h>' >> "$SOURCE_FILE"
	echo '#include <signal.h>' >> "$SOURCE_FILE"
	echo '#include <setjmp.h>' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
	echo '#include <unistd.h>' >> "$SOURCE_FILE"
	echo '#include <fcntl.h>' >> "$SOURCE_FILE"
	echo '#include <sys/types.h>' >> "$SOURCE_FILE"
	echo '#include <sys/stat.h>' >> "$SOURCE_FILE"
	echo '#include <sys/socket.h>' >> "$SOURCE_FILE"
	echo '#include <sys/time.h>' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
	echo 'int main()' >> "$SOURCE_FILE"
	echo '{' >> "$SOURCE_FILE"
	echo '	return 0;' >> "$SOURCE_FILE"
	echo '}' >> "$SOURCE_FILE"
	echo >> "$SOURCE_FILE"
}

case "$CMD" in
	help )	Help;;
	new  )	NewFile;;
	last )	if [ ! -f "$SOURCE_FILE" ]
			then
				Print 'LBLUE' "no old source file found."
				NewFile
			fi;;
	again)	if [ ! -f "$SOURCE_FILE" ]
			then
				Print 'LBLUE' "no old source file found."
				NewFile
			fi
			NO_EDIT="yes";;
	* )		Print 'RED' "ERROR: you need to provide a command, see '$MY_NAME help' for help." >&2
			exit 1;;
esac

if [ ! "$NO_EDIT" ]
then
	if [ "$EDITOR" == "vi" -o "$EDITOR" == "vim" -o "$EDITOR" == "gvim" ]
	then
		$EDITOR "$SOURCE_FILE" +18
	else
		$EDITOR "$SOURCE_FILE"
	fi
	ret="$?"
	if [ "$ret" -ne "0" ]
	then
		Print 'RED' "ERROR: editor($EDITOR) returned $ret." >&2
		exit "$ret"
	fi
fi

Print 'LBLUE' "Compiling ..."
rm -rf "$TARGET_FILE"
$COMPILER "$TARGET_FILE" "$SOURCE_FILE" $OPTIONS
ret="$?"
if [ "$ret" -ne "0" ]
then
	Print 'RED' "ERROR: compiler($COMPILER) returned $ret." >&2
	exit "$ret"
fi

if [ ! -x "$TARGET_FILE" ]
then
	Print 'RED' "ERROR: cannot found executable binary created by compiler." >&2
	exit 1
fi

args=""
if [ "`grep -Po '(^|\\s)main\\s*\\(.*,.*\\)' \"$SOURCE_FILE\" 2> /dev/null`" ]
then
	Print 'LBLUE' "Please enter arguments for launching your program:"
	read args
fi

Print 'LBLUE' "Launching ..."
Print 'YELLOW' "================= OUTPUT ================="
bash -c "\"$TARGET_FILE\" $args"
ret="$?"
Print 'YELLOW' "=========================================="
if [ "$ret" -ne "0" ]
then
	Print 'RED' "WARNING: your program returned $ret." >&2
	exit "$ret"
fi

Print 'LBLUE' "DONE"

